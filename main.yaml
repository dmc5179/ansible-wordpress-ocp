---
- hosts: all
  connection: local
  become: false

  tasks:

    - name: Log in (obtain access token)
      k8s_auth:
        username: admin
        password: "{{ k8s_admin_password }}"
        validate_certs: "{{ validate_certs }}"
        host: "{{ cluster_api }}"
      register: k8s_auth_results

    - name: Create a wordpress namespace
      k8s:
        host: "{{ cluster_api }}"
        name: wordpress
        api_version: v1
        kind: Namespace
        state: present
        validate_certs: "{{ validate_certs }}"
        wait: true
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: Configure SCC policy for wordpress
      shell:
        cmd: oc adm policy add-scc-to-user anyuid -z default

    - name: Wait for SCC policy updates to take effect
      pause:
        seconds: 10

#    - name: Create Wordpress Database PVC
#      k8s:
#        state: present
#        definition: "{{ lookup('file', 'wordpress-db-pvc.yaml') }}"
#        namespace: wordpress
#        validate_certs: "{{ validate_certs }}"
#        wait: true
#        kubeconfig: "{{ kubeconfig }}"

#    - name: Create Wordpress Data PVC
#      k8s:
#        state: present
#        host: "{{ cluster_api }}"
#        definition: "{{ lookup('file', 'wordpress-data-pvc.yaml') }}"
#        namespace: wordpress
#        validate_certs: "{{ validate_certs }}"
#        wait: true
#        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: Create Wordpress Database
      k8s:
        state: present
        host: "{{ cluster_api }}"
        definition: "{{ lookup('file', 'mysql.yaml') }}"
        namespace: wordpress
        validate_certs: "{{ validate_certs }}"
        wait: true
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: Create Wordpress
      k8s:
        state: present
        host: "{{ cluster_api }}"
        definition: "{{ lookup('file', 'wordpress.yaml') }}"
        namespace: wordpress
        validate_certs: "{{ validate_certs }}"
        wait: true
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: Create Wordpress Route
      k8s:
        state: present
        host: "{{ cluster_api }}"
        namespace: wordpress
        validate_certs: "{{ validate_certs }}"
        wait: true
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: v1
          kind: Route
          metadata:
            labels:
              app: wordpress
            name: wordpress
          spec:
            host: "wordpress-wordpress.apps.{{ cluster_name }}.{{ cluster_domain }}"
            port:
              targetPort: wordpress
            to:
              kind: Service
              name: wordpress
              weight: 100
            wildcardPolicy: None

#    - name: Create Wordpress Database
#      k8s:
#        state: present
#        namespace: wordpress
#        api_version: v1
#        validate_certs: "{{ validate_certs }}"
#        wait: true
#        api_key: "{{ api_key }}"
#        definition:
#          apiVersion: v1
#          kind: Deployment
#          metadata:
#            name: mysql
#            labels:
#              app: mysql
#          spec:
#            replicas: 1
#            selector:
#              matchLabels:
#                app: mysql
#            strategy:
#              type: Recreate
#            template:
#              metadata:
#                labels:
#                  app: mysql
#              spec:
#                containers:
#                - image: mysql:5.7
#                  imagePullPolicy: Always
#                  name: mysql-57
#                  env:
#                  - name: MYSQL_DATABASE
#                    value: wordpress
#                  - name: MYSQL_USER
#                    value: wordpress
#                  - name: MYSQL_PASSWORD
#                    value: wordpress
#                  - name: MYSQL_ROOT_PASSWORD
#                    value: wordpress
#                  - name: MYSQL_TABLE_PREFIX
#                    value: wp_
#                  ports:
#                  - containerPort: 3306
#                    name: mysql
